n mochaOriginal.afterEach.apply(this, wrapTestInZone(arguments));
  };

  context.before = context.suiteSetup = Mocha.before = function() {
    return mochaOriginal.before.apply(this, wrapSuiteInZone(arguments));
  };

  context.beforeEach = context.setup = Mocha.beforeEach = function() {
    return mochaOriginal.beforeEach.apply(this, wrapTestInZone(arguments));
  };

  ((originalRunTest, originalRun) => {
    Mocha.Runner.prototype.runTest = function(fn) {
      Zone.current.scheduleMicroTask('mocha.forceTask', () => {
        originalRunTest.call(this, fn);
      });
    };

    Mocha.Runner.prototype.run = function(fn) {
      this.on('test', (e) => {
        if (Zone.current !== rootZone) {
          throw new Error('Unexpected zone: ' + Zone.current.name);
        }
        testZone = rootZone.fork(new ProxyZoneSpec());
      });

     